;(define (answer rows cols)
;  (cond ((and (= rows 1) (= cols 1) 2))
;        ((= rows 1) (+ cols 1))
;        ((= cols 1) (+ rows 1))
;        (else (+ (answer rows (- cols 1)) (answer (- rows 1) cols)))))

(define ht (make-hash-table))

(define (answer rows cols)
  (hash-table/lookup ht (list rows cols)
    (lambda (x) x)
    (lambda () 
      (cond ((and (= rows 1) (= cols 1))
             (hash-table/put! ht (list rows cols) 2))
            ((= rows 1)
             (hash-table/put! ht (list rows cols) (+ cols 1))
             (+ cols 1))
            ((= cols 1)
             (hash-table/put! ht (list rows cols) (+ rows 1))
             (+ rows 1))
            (else
              (let ((key (+ (answer rows (- cols 1)) (answer (- rows 1) cols))))
               (hash-table/put! ht (list rows cols) key)
               key))))))
